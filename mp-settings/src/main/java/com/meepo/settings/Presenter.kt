package com.meepo.settingsimport android.util.Logimport com.meepo.sdk.base.mvp.BasePresenterimport com.meepo.sdk.observer.Observerimport com.meepo.sdk.observer.ObserverManagerimport com.meepo.sdk.observer.ObserverManager.applyObserverimport com.meepo.sdk.observer.ObserverManager.applySchedulersimport com.meepo.settings.schema.AppUpgrade/** * @author  佟旭 * @wechat tongxury * @date  2020/10/14 10:46 PM * @version 1.0 */class Presenter : BasePresenter<IContract.IView>(), IContract.IPresenter {    override fun findUserSettings() {        ObserverManager            .applyFunc { Store.Func.fetchAndApplyUserSettings() }            .compose(mView?.bindToLife<Unit>())            .applyObserver(object : Observer<Unit>() {                override fun onFailure(e: Throwable) {                    Log.e("Presenter", e.message)                }                override fun onSuccess(t: Unit?) {                    mView?.applyUserSettings()                }            })    }    override fun fetchForAppUpgrade() {        IService.get().fetchAppSettings()            .applySchedulers()            .map { rsp -> rsp.data }            .compose(mView?.bindToLife<AppUpgrade>())            .subscribe(object : Observer<AppUpgrade>() {                override fun onFailure(e: Throwable) {                    Log.e("onFailure", e.message)                }                override fun onSuccess(t: AppUpgrade?) {                    t?.let {                        mView?.applyAppUpdate(it)                    }                }            })    }}