package com.meepo.feed.article.core.searchimport android.util.Logimport com.meepo.feed.Serviceimport com.meepo.feed.Storeimport com.meepo.feed.schema.SearchMetadataimport com.meepo.sdk.base.mvp.BasePresenterimport com.meepo.sdk.observer.Observerimport com.meepo.sdk.observer.ObserverManagerimport com.meepo.sdk.observer.ObserverManager.applyObserverimport com.meepo.sdk.observer.ObserverManager.applySchedulers/** * @author  佟旭 * @wechat tongxury * @date  2020/10/14 10:46 PM * @version 1.0 */class Presenter : BasePresenter<IContract.IView>(), IContract.IPresenter {    override fun getSearchMetadata() {        Service.get().fetchSearchMetadata()            .applySchedulers()            .map { rsp -> rsp.data }            .compose(mView?.bindToLife<SearchMetadata>())            .doFinally { mView?.doFinally() }            .subscribe(object : Observer<SearchMetadata>() {                override fun onSuccess(t: SearchMetadata?) {                    mView?.applySearchMetadata(t)                }                override fun onFailure(e: Throwable) {                    Log.e("onFailure", e.message)                }            })    }    override fun getSearchHistory() {        ObserverManager            .applyFunc { SearchStore.Func.fetchSearchHistory() }            .compose(mView?.bindToLife<List<String>>())            .applyObserver(object : Observer<List<String>>() {                override fun onSuccess(t: List<String>?) {                    mView?.applySearchHistory(t)                }                override fun onFailure(e: Throwable) {                    Log.e("Presenter 3", e.message)                }            })    }    override fun putSearchHistory(word: String) {        ObserverManager            .applyFunc { SearchStore.Func.putSearchHistory(word) }            .compose(mView?.bindToLife<Unit>())            .applyObserver(object : Observer<Unit>() {                override fun onSuccess(t: Unit?) {                    mView?.applySearchHistoryChanged()                }                override fun onFailure(e: Throwable) {                    Log.e("Presenter 1", e.message)                }            })    }    override fun clearSearchHistory() {        Log.e("clearSearchHistory", "clearSearchHistory")        ObserverManager            .applyFunc { SearchStore.Func.clearSearchHistory() }            .compose(mView?.bindToLife<Unit>())            .applyObserver(object : Observer<Unit>() {                override fun onSuccess(t: Unit?) {                    mView?.applySearchHistoryChanged()                }                override fun onFailure(e: Throwable) {                    Log.e("Presenter 2", e.message)                }            })    }}