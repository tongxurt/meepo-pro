package com.meepo.feed.article.core.detailimport android.util.Logimport com.meepo.feed.Serviceimport com.meepo.feed.Storeimport com.meepo.feed.schema.Commentimport com.meepo.feed.schema.CommentResultimport com.meepo.feed.schema.Itemimport com.meepo.feed.schema.ReqCommentimport com.meepo.sdk.framework.BasePresenterimport com.meepo.sdk.observer.Observerimport com.meepo.sdk.observer.ObserverManager.applySchedulers/** * @author  佟旭 * @wechat tongxury * @date  2020/10/14 10:46 PM * @version 1.0 */class Presenter : BasePresenter<IContract.IFeedView>(), IContract.IFeedPresenter {    private var commentPage = 1;//    private var hasMore = true;    override fun starComment(id: String) {        Service.get().starComment(id)            .applySchedulers()            .map { rsp -> rsp.data }            .compose(mView?.bindToLife<Unit>())            .subscribe(object : Observer<Unit>() {                override fun onSuccess(t: Unit?) {                }                override fun onFailure(e: Throwable) {                }            })    }    override fun follow(item: Item) {    }    override fun fetchComments(targetId: String, targetType: String) {//        if (!hasMore) {//            return//        }        Service.get().fetchComments(targetId, targetType, commentPage, size = 15)            .applySchedulers()            .map { rsp -> rsp.data }            .compose(mView?.bindToLife<CommentResult>())            .subscribe(object : Observer<CommentResult>() {                override fun onSuccess(t: CommentResult?) {                    t?.let {                        mView?.appendComments(t.items, t.pagination.total, t.pagination.hasMore)//                        hasMore = t.pagination.hasMore                        commentPage += 1                    }                }                override fun onFailure(e: Throwable) {                }            })    }    override fun comment(item: Item, content: String) {        Service.get()            .addComment(ReqComment(targetId = item.id, targetType = Store.COMMENT_TARGET_ITEM, content = content, atCommentId = null))            .applySchedulers()            .map { rsp -> rsp.data }            .compose(mView?.bindToLife<Comment>())            .subscribe(object : Observer<Comment>() {                override fun onSuccess(t: Comment?) {                    t?.let {                        mView?.applyComment(t)                    }                }                override fun onFailure(e: Throwable) {                }            })    }    override fun share(item: Item) {        Service.get().saveUserItem(item.id, Store.USER_ITEM_TYPE_SHARED, 0)            .applySchedulers()            .map { rsp ->                Log.e("Presenter", "" + rsp.code)                rsp.data            }            .compose(mView?.bindToLife<Item>())            .subscribe(object : Observer<Item>() {                override fun onSuccess(t: Item?) {                    t?.let {                        mView?.apply(t)                    }                }                override fun onFailure(e: Throwable) {                }            })    }    override fun collect(item: Item) {        val action = if (item.isCollected()) Store.ACTION_DELETE else Store.ACTION_ADD        Service.get().saveUserItem(item.id, Store.USER_ITEM_TYPE_COLLECTED, action)            .applySchedulers()            .map { rsp -> rsp.data }            .compose(mView?.bindToLife<Item>())            .subscribe(object : Observer<Item>() {                override fun onSuccess(t: Item?) {                    t?.let {                        mView?.apply(t)                    }                }                override fun onFailure(e: Throwable) {                }            })    }    override fun fetchDetail(id: String) {        Service.get().fetchDetail(id)            .applySchedulers()            .map { rsp -> rsp.data }            .compose(mView?.bindToLife<Item>())            .subscribe(object : Observer<Item>() {                override fun onSuccess(t: Item?) {                    t?.let {                        mView?.apply(t)                    }                }                override fun onFailure(e: Throwable) {                }            })    }}